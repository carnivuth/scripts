#!/bin/bash

export PATH="$HOME/.local/bin:$PATH"

# set PS1 variable
BLUE6="\[$(tput setaf 6)\]"
BLUE21="\[$(tput setaf 21)\]"
RESET="\[$(tput sgr0)\]"
PS1="[${BLUE6}\u@\h${RESET}:${BLUE21}\w${RESET}]"

# setup default fzf options
export FZF_DEFAULT_OPTS='--cycle --bind "tab:toggle-up,btab:toggle-down"'

# import fzf integration
eval  "$(fzf --bash)"

# starship integration
eval "$(starship init bash)"

#autodisown aliases
alias d='start_and_disown.sh'

#ls aliases
alias ls='ls --color=auto '
alias ll='ls --color=auto -pl'
alias la='ls --color=auto -pa'
alias lla='ls --color=auto -pla'

# sudo
alias s='sudo'

# pacman
alias pacman='pacman --color=auto'
alias update='pkg_manager.sh update'

# gio open
alias open='gio open'

# clean env
alias docker_remove_all='clean_env.sh docker_clean'
alias vagrant_remove_all='clean_env.sh vagrant_clean'
alias ollama_remove_all='clean_env.sh ollama_clean'

# systemctl
alias sctlu='systemctl --user'
alias jctlu='journalctl --user'

# store alises
alias si='store.sh install'
alias sr='store.sh remove'

# LOGS FOLDER PATH
SCRIPTS_LOGS_FOLDER="$HOME/.local/log/scripts"
if [[ ! -d "$SCRIPTS_LOCAL_FOLDER" ]] ;then mkdir -p "$SCRIPTS_LOGS_FOLDER"; fi

# PATH FOR PERSISTANT INFORMATIONS
SCRIPTS_LOCAL_FOLDER="$HOME/.local/cache/scripts"
if [[ ! -d "$SCRIPTS_LOCAL_FOLDER" ]] ;then mkdir -p "$SCRIPTS_LOCAL_FOLDER"; fi

# FOLDER FOR RUN INFORMATIONS
SCRIPTS_RUN_FOLDER="/tmp/scripts"
if [[ ! -d "$SCRIPTS_RUN_FOLDER" ]] ;then mkdir -p "$SCRIPTS_RUN_FOLDER"; fi

SCRIPTS_BIN_FOLDER="$HOME/.local/bin"
SCRIPTS_LIB_FOLDER="$HOME/.local/lib"
SCRIPTS_VAR_FOLDER="$SCRIPTS_LIB_FOLDER"
SCRIPTS_SYSTEMD_FOLDER="$HOME/.config/systemd/user"

OBSIDIAN_NOTE_VAULT="$HOME/vaults/TIL"

# GITHUB ACCOUNT FOR GITHUB APPLET
GITHUB_REPOVIEWER_ACCOUNT=""

# PATHS TO FOLDERS WITH IMAGES FOR THEMESWITCHER APPLET
THEMESWITCHER_FOLDERS="$HOME/.local/lib $HOME/wallpapers"

# MOUNTER SCRIPT VARIABLES
declare -A MOUNTS

# LIST OF STORAGE TO MOUNT WITH RCLONE
MOUNTS["google drive"]="$HOME/google_drive"

# add mounts by adding elements to the array
# MOUNTS["rclone storage name"]="mount path"

# base url for quicksearch applet
BASE_QUICKSEARCH_URL='https://duckduckgo.com/?q='

# applet menu backend  this configuration is valid only when running L.sh from command line, not from keybinds, see etc/hypr/bindings.conf
# examples are:
# MENU_BACKEND='wofi -d --show dmenu -p'
# MENU_BACKEND='fuzzel  -d -p'
# MENU_BACKEND='rofi -dmenu -p'
# MENU_BACKEND='bemenu -p'
MENU_BACKEND='fzf --prompt'

# enabled systemd services
ENABLED_SERVICES="weather.service pkg_manager.service battery.service"
TEMPLATE_SERVICES=" nxtcdd@projects.service nxtcdd@Documents.service folder_manager@Downloads.service"

# enabled systemd timers
ENABLED_TIMERS="git_sync.timer prune.timer"

# BATTERY SERVICE SETTINGS

# battery device name (output of upower -e)
BATTERY_NAME="BAT0"

# battery warning limit (percentage)
BATTERY_LIMIT=20
BATTERY_SLEEP_TIME="5m"

# BACKUP TIMER SETTINGS
# policy to pass to borg prune command (monthly)
BORG_PRUNE_POLICY="10"

# path to borg repository folder with backups
BORG_REPOSITORY_FOLDER="$HOME/.borg"

# folders to backup with borg
BORG_BACKUP_TARGETS="/etc/pacman.conf
$HOME/.config/scripts/settings.sh
$HOME/.gitconfig
$HOME/projects/
$HOME/vaults/
$HOME/.ssh/config"

# rsync connection parameters for backup remote sync, there are other requirements for this to work
# user needs to be able to connect in ssh with key authentication
# rsync needs to be installed on the remote
# remote path need to exists on remote

# enable remote sync [1/0]
BORG_REMOTE_ENABLED=0

BORG_BACKUP_REMOTE_SERVER=""
BORG_BACKUP_REMOTE_PATH="/mnt/datastore/pc-backups/$HOSTNAME"

# rclone config parameters
BORG_RCLONE_ENABLED=0
BORG_RCLONE_REMOTE="google drive"
BORG_BACKUP_RCLONE_PATH="backup/$HOSTNAME"

# WEATHER WAYBAR INTEGRATION SCRIPT
WEATHER_LOCATION=""

# GIT AUTOSYNC FUNCTIONALITY
GIT_REPOS="$HOME/scripts $HOME/toolbox $HOME/vaults/* $HOME/projects/*"
# insert here ignored remote for git_sync timer
GIT_IGNORED_REMOTES=""

# MPV SOCKET FOR IPC
MPV_SOCKET="$SCRIPTS_RUN_FOLDER/mpv.sock"

# NTFYD CONFIGURATIONS
NTFYD_ENDPOINT=""
NTFYD_TOPICS="homelab,work,random"
NTFYD_MESSAGE_BUFFER="$SCRIPTS_RUN_FOLDER/ntfy.run"
# set to -vvv to see curl debug when running ntfyd
NTFYD_DEBUG=""

# recorder settings
RECORDER="wf-recorder"
RECORDER_OUTPUT_PATH="/tmp/captures"

# vpn connection name
VPN_CONNECTION_NAME=""

# nextcloud script settings
NEXTCLOUD_URL=""
NXTCDD_USERNAME=""
NXTCDD_PASSWORD=""

# notification urgency to be displayed
NOTIFICATION_LEVELS="critical"

# password store dirs to look for passwords
PASSWORD_STORES="$HOME/.password-store"

# bemenu configs
export BEMENU_OPTS="--fb '#24273a' --ff '#cad3f5' --nb '#24273a' --nf '#cad3f5' --tb '#24273a' --hb '#24273a' --tf '#ed8796' --hf '#eed49f' --af '#cad3f5' --ab '#24273a' --bdr '#b4befe' --hp 10 -B 1 --fn 'JetBrainsMono Nerd Font,JetBrainsMono NF:style=ExtraBold 9' -H 21"
